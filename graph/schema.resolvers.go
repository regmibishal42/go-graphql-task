package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.24

import (
	"context"
	"myapp/graph/model"
	"myapp/service"
)

// Login is the resolver for the login field.
func (r *authResolver) Login(ctx context.Context, obj *model.Auth, email string, password string) (interface{}, error) {
	return service.UserLogin(ctx, email, password)
	//panic(fmt.Errorf("not implemented: Login - login"))
}

// Register is the resolver for the register field.
func (r *authResolver) Register(ctx context.Context, obj *model.Auth, input model.NewUser) (interface{}, error) {
	return service.UserRegister(ctx, input)
	//panic(fmt.Errorf("not implemented: Register - register"))
}

// Auth is the resolver for the auth field.
func (r *mutationResolver) Auth(ctx context.Context) (*model.Auth, error) {
	return &model.Auth{}, nil
	//panic(fmt.Errorf("not implemented: Auth - auth"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*model.User, error) {
	return service.UserGetByID(ctx, id)
	//panic(fmt.Errorf("not implemented: User - user"))
}

// Protected is the resolver for the protected field.
func (r *queryResolver) Protected(ctx context.Context) (string, error) {
	return "success", nil
	//panic(fmt.Errorf("not implemented: Protected - protected"))
}

// Auth returns AuthResolver implementation.
func (r *Resolver) Auth() AuthResolver { return &authResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type authResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
